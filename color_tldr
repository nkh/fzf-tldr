#!/bin/env perl

use strict ; use warnings ;
use v5.10 ;
sub defined_or ;

my ($file) = shift @ARGV ;
my $fh ; $file eq '-' ? $fh = *STDIN : open $fh, "<", $file or die "color_tldr: can't open '$file'\n" ;

my ( $flatten, $extra_line, $show_header, $header_color, $comment_color, $option_color, $placeholder_color ) = defined_or \@ARGV,
   ( 0,        0,           1,            37,            34,             33,            '1;33'             ) ;

$extra_line = $extra_line ? "\n" : '' ;

# read header end entries
my @header ;
/^-/ and @_ = ($_, <$fh>) or push @header, $_ while <$fh> ;

my ($max_description_length, @tldr_entries) = (0) ;

while( @_ )
	{
	my $description = shift @_ ;
	chomp $description ;
	
	$max_description_length = length $description if length $description > $max_description_length ;
	
	# parse examples
	my @examples ;
	while( @_ )
		{
		last if $_[0] =~ /^-/ ; # next entry
		
		$_ = shift @_ ;
		s/^`// ;
		s/`$// ;
		next if /^\s*$/ ; 
		
		push @examples, $_ ;
		}
	
	push @tldr_entries, [$description, \@examples] ;
	}

unless($flatten || !$show_header) { shift @header ; shift @header ; print map { s/^..// ; "\e[${header_color}m$_\e[m" } @header } ;

for(@tldr_entries)
	{
	my ($description, $examples) = @$_ ;
	
	$flatten or say "\e[${comment_color}m# $description\e[m$extra_line" ;
	
	for (@$examples)
		{
		s/(\s-[^ ]+)/\e[${option_color}m$1\e[m/g ;
		s/( \{\{ .+? \}\} )/\e[${placeholder_color}m$1\e[m/xg ;
		
		$flatten and printf("\e[${comment_color}m%-${max_description_length}s > \e[m%s", $description, $_) 
			 or  print "    $_" ;
		}
	
	$flatten or say '' ;
	}

sub defined_or { my ($l, @d) = @_ ; (map { $b = shift @d ; $_ // $b } @$l), @d }

#! vim: set ft=perl:

